local config = require "main.config"
local bezier = require "game.shared.bezier"
local missile_manager = require "game.missile.missile_manager"

local msg_pos = hash("position")

go.property("nr", 0) -- vector3
go.property("missile_id", hash("")) -- vector3
go.property("start_pos", vmath.vector3()) -- vector3
go.property("end_pos", vmath.vector3())	-- vector3
go.property("position_index", 0) -- controls where we are in the movement towards target

local function on_reached_target(self)
	if self.nr == 1 then
		factory.create("/factories#missile_explosion", vmath.vector3(self.end_pos.x,self.end_pos.y,0), nil, {}, 1.0) 
		missile_manager.remove_missile(self.missile_id)
	end
	go.delete()
end

function init(self)
	local dist_x = self.end_pos.x-self.start_pos.x
	local dist_y = self.end_pos.y-self.start_pos.y
	self.distance = math.sqrt(dist_x * dist_x + dist_y * dist_y)
	self.travel_time = self.distance/config.MISSILE_SPEED -- travel time in seconds
	
	self.v1 = vmath.slerp(0.3, self.start_pos, self.end_pos)
	self.v1.x = self.v1.x + math.random(config.MISSILE_BEZIER_OFFSET) - config.MISSILE_BEZIER_OFFSET * 0.5
	self.v1.y = self.v1.y + math.random(config.MISSILE_BEZIER_OFFSET) - config.MISSILE_BEZIER_OFFSET * 0.5
	
	self.v2 = vmath.slerp(0.6, self.start_pos, self.end_pos)
	self.v2.x = self.v2.x + math.random(config.MISSILE_BEZIER_OFFSET) - config.MISSILE_BEZIER_OFFSET * 0.5
	self.v2.y = self.v2.y + math.random(config.MISSILE_BEZIER_OFFSET) - config.MISSILE_BEZIER_OFFSET * 0.5
	
	go.set_position(vmath.vector3(self.start_pos.x,self.start_pos.y, 0))

	go.animate("#script", "position_index", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, self.travel_time, 0, function() on_reached_target(self) end)

--	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.end_pos.x, go.EASING_LINEAR, self.travel_time, 0, function() on_reached_target(self) end)
--	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.end_pos.y, go.EASING_LINEAR, self.travel_time, 0)

	particlefx.play("#trail_fx")
end

function update(self,dt)
	
	local pos = bezier.bezier4 (self.start_pos, self.v1, self.v2, self.end_pos, self.position_index )
	go.set_position(pos)

	self.new_pos = pos
	if self.old_pos then
		local rot = math.atan ((self.new_pos.y-self.old_pos.y) / (self.new_pos.x - self.old_pos.x )) 
		go.set_rotation(vmath.quat_rotation_z(rot+math.pi*0.5))
	end
	self.old_pos = self.new_pos
end

function on_message(self, message_id, message, sender)
    if message_id == msg_pos then
    	local pos = vmath.vector3(message.x,message.y,go.get_position().z)
    	go.set_position(pos)
    	go.set_rotation(message.rotation)
    end
end